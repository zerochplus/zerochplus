#============================================================================================================
#
#	掲示板情報管理モジュール
#	-------------------------------------------------------------------------------------
#	このモジュールは管理CGIの掲示板情報を管理します。
#	以下の2つのパッケージによって構成されます
#
#	NAZGUL	: 掲示板情報管理
#	ANGMAR	: カテゴリ情報管理
#
#============================================================================================================

#============================================================================================================
#
#	掲示板情報管理パッケージ
#
#============================================================================================================
package	NAZGUL;

use strict;
use warnings;

#------------------------------------------------------------------------------------------------------------
#
#	コンストラクタ
#	-------------------------------------------------------------------------------------
#	@param	なし
#	@return	モジュールオブジェクト
#
#------------------------------------------------------------------------------------------------------------
sub new
{
	my $class = shift;
	
	my $obj = {
		'NAME'		=> undef,
		'DIR'		=> undef,
		'SUBJECT'	=> undef,
		'CATEGORY'	=> undef,
	};
	
	bless $obj, $class;
	
	return $obj;
}

#------------------------------------------------------------------------------------------------------------
#
#	掲示板情報読み込み
#	-------------------------------------------------------------------------------------
#	@param	$Sys	MELKOR
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Load
{
	my $this = shift;
	my ($Sys) = @_;
	
	$this->{'NAME'} = {};
	$this->{'DIR'} = {};
	$this->{'SUBJECT'} = {};
	$this->{'CATEGORY'} = {};
	
	my $path = '.' . $Sys->Get('INFO') . '/bbss.cgi';
	
	if (open(my $fh, '<', $path)) {
		flock($fh, 2);
		my @lines = <$fh>;
		close($fh);
		map { s/[\r\n]+\z// } @lines;
		
		foreach (@lines) {
			next if ($_ eq '');
			
			my @elem = split(/<>/, $_, -1);
			if (scalar(@elem) < 5) {
				warn "invalid line in $path";
				next;
			}
			
			my $id = $elem[0];
			$this->{'NAME'}->{$id} = $elem[1];
			$this->{'DIR'}->{$id} = $elem[2];
			$this->{'SUBJECT'}->{$id} = $elem[3];
			$this->{'CATEGORY'}->{$id} = $elem[4];
		}
	}
	else {
		warn "can't load bbs info: $path";
	}
}

#------------------------------------------------------------------------------------------------------------
#
#	掲示板情報保存
#	-------------------------------------------------------------------------------------
#	@param	$Sys	MELKOR
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Save
{
	my $this = shift;
	my ($Sys) = @_;
	
	my $path = '.' . $Sys->Get('INFO') . '/bbss.cgi';
	
	if (open(my $fh, (-f $path ? '+<' : '>'), $path)) {
		flock($fh, 2);
		seek($fh, 0, 0);
		binmode($fh);
		
		foreach (keys %{$this->{'NAME'}}) {
			my $data = join('<>',
				$_,
				$this->{'NAME'}->{$_},
				$this->{'DIR'}->{$_},
				$this->{'SUBJECT'}->{$_},
				$this->{'CATEGORY'}->{$_}
			);
			
			print $fh "$data\n";
		}
		
		truncate($fh, tell($fh));
		close($fh);
	}
	else {
		warn "can't save bbs info: $path";
	}
	chmod $Sys->Get('PM-ADM'), $path;
}

#------------------------------------------------------------------------------------------------------------
#
#	掲示板IDセット取得
#	-------------------------------------------------------------------------------------
#	@param	$kind	検索種別('ALL'の場合すべて)
#	@param	$name	検索ワード
#	@param	$pBuf	IDセット格納バッファ
#	@return	キーセット数
#
#------------------------------------------------------------------------------------------------------------
sub GetKeySet
{
	my $this = shift;
	my ($kind, $name, $pBuf) = @_;
	
	my $n = 0;
	
	if ($kind eq 'ALL') {
		$n += push @$pBuf, sort keys %{$this->{'NAME'}};
	}
	else {
		foreach my $key (keys %{$this->{$kind}}) {
			if (($this->{$kind}->{$key} eq $name)) {
				$n += push @$pBuf, $key;
			}
		}
	}
	
	return $n;
}

#------------------------------------------------------------------------------------------------------------
#
#	掲示板情報取得
#	-------------------------------------------------------------------------------------
#	@param	$kind	情報種別
#	@param	$key	ユーザID
#			$default : デフォルト
#	@return	ユーザ情報
#
#------------------------------------------------------------------------------------------------------------
sub Get
{
	my $this = shift;
	my ($kind, $key, $default) = @_;
	
	my $val = $this->{$kind}->{$key};
	
	return (defined $val ? $val : (defined $default ? $default : undef));
}

#------------------------------------------------------------------------------------------------------------
#
#	掲示板情報追加
#	-------------------------------------------------------------------------------------
#	@param	$name		掲示板名称
#	@param	$dir		掲示板ディレクトリ
#	@param	$subject	説明
#	@param	$category	掲示板カテゴリ
#	@return	掲示板ID
#
#------------------------------------------------------------------------------------------------------------
sub Add
{
	my $this = shift;
	my ($name, $dir, $subject, $category) = @_;
	
	my $id = time;
	$this->{'NAME'}->{$id}		= $name;
	$this->{'DIR'}->{$id}		= $dir;
	$this->{'SUBJECT'}->{$id}	= $subject;
	$this->{'CATEGORY'}->{$id}	= $category;
	
	return $id;
}

#------------------------------------------------------------------------------------------------------------
#
#	掲示板情報設定
#	-------------------------------------------------------------------------------------
#	@param	$id		掲示板ID
#	@param	$kind	情報種別
#	@param	$val	設定値
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Set
{
	my $this = shift;
	my ($id, $kind, $val) = @_;
	
	if (exists $this->{$kind}->{$id}) {
		$this->{$kind}->{$id} = $val;
	}
}

#------------------------------------------------------------------------------------------------------------
#
#	掲示板情報削除
#	-------------------------------------------------------------------------------------
#	@param	$id		削除掲示板ID
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Delete
{
	my $this = shift;
	my ($id) = @_;
	
	delete $this->{'NAME'}->{$id};
	delete $this->{'DIR'}->{$id};
	delete $this->{'SUBJECT'}->{$id};
	delete $this->{'CATEGORY'}->{$id};
}

#------------------------------------------------------------------------------------------------------------
#
#	掲示板情報更新
#	-------------------------------------------------------------------------------------
#	@param	$Sys	MELKOR
#	@param	$skey	掲示板名称のキー
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Update
{
	my $this = shift;
	my ($Sys, $skey) = @_;
	
	# 現在の情報をすべてクリア
	$this->{'NAME'} = {};
	$this->{'DIR'} = {};
	$this->{'SUBJECT'} = {};
	$this->{'CATEGORY'} = {};
	
	my $bbsroot = $Sys->Get('BBSPATH');
	$skey = 'BBS_TITLE' if ($skey eq '');
	
	# BBSルート対象
	my @dirs = ();
	if (opendir(my $dh, $bbsroot)) {
		@dirs = readdir($dh);
		closedir($dh);
	}
	
	# 掲示板ルート検索
	foreach my $dir (@dirs) {
		# ディレクトリ発見, SETTING.TXT存在
		if (-d "$bbsroot/$dir" && -e "$bbsroot/$dir/SETTING.TXT") {
			my $id = time;
			$id++ while (exists $this->{'DIR'}->{$id});
			
			$this->{'DIR'}->{$id} = $dir;
			$this->{'CATEGORY'}->{$id} = '0000000001';
			
			my $path = "$bbsroot/$dir/SETTING.TXT";
			if (open(my $fh, '<', $path)) {
				flock($fh, 2);
				my @lines = <$fh>;
				close($fh);
				map { s/[\r\n]+\z// } @lines;
				
				# SETTING.TXTから必要な情報を取得する
				my $f = 0;
				foreach (@lines) {
					next if ($_ !~ /^(.+?)=(.*)$/);
					my ($key, $dat) = ($1, $2);
					if ($key eq $skey) {
						$this->{'NAME'}->{$id} = $dat;
						$f++;
					}
					elsif ($key eq 'BBS_SUBTITLE') {
						$this->{'SUBJECT'}->{$id} = $dat;
						$f++;
					}
					last if ($f == 2);
				}
			}
			else {
				warn "can't load setting: $path";
			}
		}
	}
}

#------------------------------------------------------------------------------------------------------------
#
#	掲示板コンテンツ生成 - CreateContents
#	-------------------------------------------
#	引　数：$Sys : MELKOR
#			$Page : THORIN
#	戻り値：なし
#
#------------------------------------------------------------------------------------------------------------
sub CreateContents
{
	my $this = shift;
	my ($Sys, $Page) = @_;
	
	# カテゴリ情報を読み込み
	my @catSet = ();
	my $Category = ANGMAR->new;
	$Category->Load($Sys);
	$Category->GetKeySet(\@catSet);
	
	$Page->Print('<html><!--nobanner--><body><small><center><br>');
	
	# ここらへんに自分の掲示板の名前を入れる
	$Page->Print('<b>0ch+ BBS<br>');
	$Page->Print("Contents</b><br><br><hr></center><br>\n");
	
	foreach my $cid (@catSet) {
		# カテゴリ出力
		my $name = $Category->Get('NAME', $cid);
		$Page->Print("<b>$name</b><br>\n");
		
		my @keySet = ();
		$this->GetKeySet('CATEGORY', $cid, \@keySet);
		foreach my $id (@keySet) {
			my $name = $this->{'NAME'}->{$id};
			my $dir = $this->{'DIR'}->{$id};
			
			# 掲示板リンク出力
			$Page->Print("　<a href=\"./$dir/\" target=MAIN>");
			$Page->Print("$name</a><br>\n");
		}
		$Page->Print('<br>');
	}
	
	my $bbsroot = $Sys->Get('BBSPATH');
	my $ver = $Sys->Get('VERSION');
	
	$Page->Print("<hr>$ver</body></html>\n");
	
	$Page->Flush(1, $Sys->Get('PM-TXT'), "$bbsroot/contents.html");
}


#============================================================================================================
#
#	カテゴリ情報管理パッケージ
#
#============================================================================================================
package	ANGMAR;

use strict;
use warnings;

#------------------------------------------------------------------------------------------------------------
#
#	コンストラクタ
#	-------------------------------------------------------------------------------------
#	@param	なし
#	@return	モジュールオブジェクト
#
#------------------------------------------------------------------------------------------------------------
sub new
{
	my $class = shift;
	
	my $obj = {
		'NAME'		=> undef,
		'SUBJECT'	=> undef,
	};
	
	bless $obj, $class;
	
	return $obj;
}

#------------------------------------------------------------------------------------------------------------
#
#	カテゴリ情報読み込み
#	-------------------------------------------------------------------------------------
#	@param	$Sys	MELKOR
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Load
{
	my $this = shift;
	my ($Sys) = @_;
	
	my $path = '.' . $Sys->Get('INFO') . '/category.cgi';
	
	if (open(my $fh, '<', $path)) {
		flock($fh, 2);
		my @lines = <$fh>;
		close($fh);
		map { s/[\r\n]+\z// } @lines;
		
		foreach (@lines) {
			next if ($_ eq '');
			
			my @elem = split(/<>/, $_, -1);
			if (scalar(@elem) < 3) {
				warn "invalid line in $path";
				next;
			}
			
			my $id = $elem[0];
			$this->{'NAME'}->{$id} = $elem[1];
			$this->{'SUBJECT'}->{$id} = $elem[2];
		}
	}
	else {
		warn "can't load category info: $path";
	}
}

#------------------------------------------------------------------------------------------------------------
#
#	カテゴリ情報保存
#	-------------------------------------------------------------------------------------
#	@param	$Sys	MELKOR
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Save
{
	my $this = shift;
	my ($Sys) = @_;
	
	my $path = '.' . $Sys->Get('INFO') . '/category.cgi';
	
	if (open(my $fh, (-f $path ? '+<' : '>'), $path)) {
		flock($fh, 2);
		seek($fh, 0, 0);
		binmode($fh);
		
		foreach (keys %{$this->{'NAME'}}) {
			my $data = join('<>',
				$_,
				$this->{'NAME'}->{$_},
				$this->{'SUBJECT'}->{$_}
			);
			
			print $fh "$data\n";
		}
		
		truncate($fh, tell($fh));
		close($fh);
	}
	else {
		warn "can't save category info: $path";
	}
	chmod $Sys->Get('PM-ADM'), $path;
}

#------------------------------------------------------------------------------------------------------------
#
#	カテゴリIDセット取得
#	-------------------------------------------------------------------------------------
#	@param	$pBuf	IDセット格納バッファ
#	@return	キーセット数
#
#------------------------------------------------------------------------------------------------------------
sub GetKeySet
{
	my $this = shift;
	my ($pBuf) = @_;
	
	my $n = push @$pBuf, keys %{$this->{'NAME'}};
	
	return $n;
}

#------------------------------------------------------------------------------------------------------------
#
#	カテゴリ情報取得
#	-------------------------------------------------------------------------------------
#	@param	$kind	情報種別
#	@param	$key	カテゴリID
#			$default : デフォルト
#	@return	カテゴリ情報
#
#------------------------------------------------------------------------------------------------------------
sub Get
{
	my $this = shift;
	my ($kind, $key, $default) = @_;
	
	my $val = $this->{$kind}->{$key};
	
	return (defined $val ? $val : (defined $default ? $default : undef));
}

#------------------------------------------------------------------------------------------------------------
#
#	カテゴリ情報追加
#	-------------------------------------------------------------------------------------
#	@param	$name		カテゴリ名称
#	@param	$subject	説明
#	@return	カテゴリID
#
#------------------------------------------------------------------------------------------------------------
sub Add
{
	my $this = shift;
	my ($name, $subject) = @_;
	
	my $id = time;
	$this->{'NAME'}->{$id}		= $name;
	$this->{'SUBJECT'}->{$id}	= $subject;
	
	return $id;
}

#------------------------------------------------------------------------------------------------------------
#
#	カテゴリ情報設定
#	-------------------------------------------------------------------------------------
#	@param	$id		カテゴリID
#	@param	$kind	情報種別
#	@param	$val	設定値
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Set
{
	my $this = shift;
	my ($id, $kind, $val) = @_;
	
	if (exists $this->{$kind}->{$id}) {
		$this->{$kind}->{$id} = $val;
	}
}

#------------------------------------------------------------------------------------------------------------
#
#	カテゴリ情報削除
#	-------------------------------------------------------------------------------------
#	@param	$id		削除カテゴリID
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Delete
{
	my $this = shift;
	my ($id) = @_;
	
	delete $this->{'NAME'}->{$id};
	delete $this->{'SUBJECT'}->{$id};
}

#============================================================================================================
#	Module END
#============================================================================================================
1;
