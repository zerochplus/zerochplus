#============================================================================================================
#
#	ファイル操作ユーティリティモジュール
#	earendil.pl
#	-------------------------------------------------------------------------------------
#	2004.02.20 start
#	-------------------------------------------------------------------------------------
#	Copy					: ファイルコピー
#	Move					: ファイル移動
#	DeleteDirectory			: ディレクトリ削除
#	GetFileInfoList			: ファイル情報リスト取得
#	GetFileList				: ファイル一覧取得
#
#============================================================================================================
package	EARENDIL;

use strict;
use warnings;

#------------------------------------------------------------------------------------------------------------
#
#	ファイルコピー
#	-------------------------------------------------------------------------------------
#	@param	$src	コピー元ファイルパス
#	@param	$dst	コピー先ファイルパス
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Copy
{
	my ($src, $dst) = @_;
	my ($perm);
	
#	eval
	{
		if (-e $src) {
			$perm = (stat $src)[2];	# パーミッション取得
			open SRC, "< $src";
			open DST, "> $dst";
			flock DST, 2;
			binmode SRC;
			binmode DST;
			while (<SRC>) {
				print DST $_;
			}
			close DST;
			close SRC;
			chmod $perm, $dst;	# パーミッション設定
		}
	};
}

#------------------------------------------------------------------------------------------------------------
#
#	ファイル移動
#	-------------------------------------------------------------------------------------
#	@param	$src	移動元ファイルパス
#	@param	$dst	移動先ファイルパス
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Move
{
	my ($src, $dst) = @_;
	my ($perm);
	
#	eval
	{
		if (-e $src) {
			$perm = (stat $src)[2];	# パーミッション取得
			open SRC, "< $src";
			open DST, "> $dst";
			flock DST, 2;
			binmode SRC;
			binmode DST;
			while (<SRC>) {
				print DST $_;
			}
			close DST;
			close SRC;
			chmod $perm, $dst;	# パーミッション設定
			unlink $src;		# コピー元削除
		}
	};
}

#------------------------------------------------------------------------------------------------------------
#
#	ディレクトリ再帰削除
#	-------------------------------------------------------------------------------------
#	@param	$path	削除するパス
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub DeleteDirectory
{
	my ($path) = @_;
	my (%fileList, $file, $attr);
	
	# ファイル情報を取得
	GetFileInfoList($path, \%fileList);
	
	foreach $file (keys %fileList) {
		if ($file ne '.' && $file ne '..') {
			(undef, undef, $attr) = split(/<>/, $fileList{$file});
			if ($attr & 1) {						# ディレクトリなら
				DeleteDirectory("$path/$file");		# 再帰呼び出し
			}
			else {									# ファイルなら
				unlink "$path/$file";				# そのまま削除
			}
		}
	}
	rmdir $path;
}

#------------------------------------------------------------------------------------------------------------
#
#	ファイル情報一覧取得
#	-------------------------------------------------------------------------------------
#	@param	$Path	一覧取得するパス
#	@param	$pList	一覧を格納するハッシュの参照
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub GetFileInfoList
{
	my ($Path, $pList) = @_;
	my (@arFiles, $file, $Full, $Attr, $Size, $Perm);
	
	opendir DIR, $Path;
	@arFiles = readdir DIR;
	closedir DIR;
	
	# ディレクトリ内の全ファイルを走査
	foreach $file (@arFiles) {
		$Full = "$Path/$file";
		$Attr = 0;
		$Size = -s $Full;										# サイズ取得
		$Perm = substr(sprintf('%o', (stat $Full)[2]), -4, 4);	# パーミッション取得
		$Attr |= 1 if (-d $Full);								# ディレクトリ？
		$Attr |= 2 if (-T $Full);								# テキストファイル？
		$pList->{$file} = "$Size<>$Perm<>$Attr";
	}
}

#------------------------------------------------------------------------------------------------------------
#
#	指定ファイル一覧取得
#	-------------------------------------------------------------------------------------
#	@param	$path	一覧取得するパス
#	@param	$pList	一覧を格納する配列の参照
#	@param	$opt	抽出オプション(正規表現)
#	@return	見つかったファイル数
#
#------------------------------------------------------------------------------------------------------------
sub GetFileList
{
	my ($path, $pList, $opt) = @_;
	my (@files, $file, $num);
	
	$num = 0;
	opendir DIR, $path;
	@files = readdir DIR;
	closedir DIR;
	
	foreach $file (@files) {
		# ディレクトリじゃなく抽出条件が一致したら配列にプッシュする
		if (! -d "$path/$file") {
			if ($file =~ /$opt/) { # $optは正規表現
				push @$pList, $file;
				$num++;
			}
		}
	}
	return $num;
}

#------------------------------------------------------------------------------------------------------------
#
#	ディレクトリ作成
#	-------------------------------------------------------------------------------------
#	@param	$path	作成するパス
#	@param	$perm	ディレクトリのパーミッション
#	@return	作成に成功したら1を返す
#
#------------------------------------------------------------------------------------------------------------
sub CreateDirectory
{
	my ($path, $perm) = @_;
	
	if (! -e $path) {
		return mkdir($path, $perm);
	}
	return 0;
}

#-------------------------------------------------------------------------------------------------------------
#
#	ディレクトリ作成
#	------------------------------------------------------------------
#	@param	$path	生成パス
#	@return	なし
#
#-------------------------------------------------------------------------------------------------------------
sub CreateFolderHierarchy
{
	my ($path) = @_;
	
	while (1) {
		if (-d $path) {
			return;
		}
		else {
			if (mkdir($path, 0777)) {
				return;
			}
			# ディレクトリ作成失敗時は再帰的に1つ下の階層を作成する
			else {
				my @elem = split(/[\\\/]/, $path);
				my $n = $#elem - 1;
				my @parts = @elem[0 .. $n];
				my $upath = join('/', @parts);
				
				CreateFolderHierarchy($upath);
			}
		}
	}
}

#------------------------------------------------------------------------------------------------------------
#
#	ディレクトリ検索
#	-------------------------------------------------------------------------------------
#	@param	$path	検索するパス
#	@param	$pHash	検索結果格納用ハッシュ
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub GetFolderHierarchy
{
	my ($path, $pHash) = @_;
	my (@elements, $elem);
	
	opendir DIR, $path;
	@elements = readdir DIR;
	closedir DIR;
	
	foreach $elem (sort @elements) {
		# ディレクトリが見つかったら再帰的に探索する
		if (-d "$path/$elem" && $elem ne '.' && $elem ne '..') {
			my (%folders);
			GetFolderHierarchy("$path/$elem", \%folders);
			if (keys(%folders) > 0) {
				$pHash->{$elem} = \%folders;
			}
			else {
				$pHash->{$elem} = undef;
			}
		}
	}
}

#------------------------------------------------------------------------------------------------------------
#
#	ディレクトリリスト取得
#	GetFolderHierarchyで取得したハッシュからディレクトリ一覧の配列を取得する
#	-------------------------------------------------------------------------------------
#	@param	$pHash	GetFolderHierarchyで取得したハッシュ
#	@param	$pList	結果格納用配列
#	@param	$base	ベースパス
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub GetFolderList
{
	my ($pHash, $pList, $base) = @_;
	my ($key);
	
	foreach $key (keys %$pHash) {
		push @$pList, "$base/$key";
		if (defined  $pHash->{$key}) {
			GetFolderList($pHash->{$key}, $pList, "$base/$key");
		}
	}
}

#============================================================================================================
#	Module END
#============================================================================================================
1;
