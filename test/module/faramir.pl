#============================================================================================================
#
#	アクセスユーザ管理モジュール(FARAMIR)
#	faramir.pl
#	------------------------------------------
#	2002.12.15 start
#	2003.01.22 共通インタフェイスに移行
#	2003.02.25 役割変更
#------------------------------------------------------------------------------------------------------------
#
#	Load
#	Save
#	Set
#	Get
#	Clear
#	Check
#
#============================================================================================================
package	FARAMIR;

use strict;
use warnings;

#------------------------------------------------------------------------------------------------------------
#
#	モジュールコンストラクタ - new
#	-------------------------------------------
#	引　数：なし
#	戻り値：モジュールオブジェクト
#
#------------------------------------------------------------------------------------------------------------
sub new
{
	my $this = shift;
	my (@USER, $obj);
	
	$obj = {
		'TYPE'		=> '',
		'METHOD'	=> '',
		'USER'		=> \@USER
	};
	bless $obj, $this;
	
	return $obj;
}

#------------------------------------------------------------------------------------------------------------
#
#	ユーザデータ読み込み - Load
#	-------------------------------------------
#	引　数：$M : MELKOR
#	戻り値：正常読み込み:0,エラー:1
#
#------------------------------------------------------------------------------------------------------------
sub Load
{
	my $this = shift;
	my ($Sys) = @_;
	my (@datas, @head, $path, $dummy);
	
	$this->{'SYS'} = $Sys;
	
	undef @{$this->{'USER'}};
	$path = $Sys->Get('BBSPATH') . '/' . $Sys->Get('BBS') . "/info/access.cgi";
	
	if (-e $path) {
		open(USER, '<', $path);
		flock(USER, 1);
		@datas = <USER>;
		close(USER);
		
		($dummy, @datas) = @datas;
		chomp $dummy;
		@head = split(/<>/, $dummy);
		$this->{'TYPE'} = $head[0];
		$this->{'METHOD'} = $head[1];
		
		foreach (@datas) {
			chomp $_;
			push @{$this->{'USER'}}, $_;
		}
		return 0;
	}
	return 1;
}

#------------------------------------------------------------------------------------------------------------
#
#	ユーザデータ書き込み - Save
#	-------------------------------------------
#	引　数：$M : MELKOR
#	戻り値：正常書き込み:0,エラー:-1
#
#------------------------------------------------------------------------------------------------------------
sub Save
{
	my $this = shift;
	my ($Sys) = @_;
	my ($path);
	
	$path	= $Sys->Get('BBSPATH') . '/' . $Sys->Get('BBS') . "/info/access.cgi";
	
	open(USER, '+<', $path);
	flock(USER, 2);
	seek(USER, 0, 0);
	binmode(USER);
	print USER $this->{'TYPE'} . '<>' . $this->{'METHOD'} . "\n";
	foreach (@{$this->{'USER'}}) {
		print USER "$_\n";
	}
	truncate(USER, tell(USER));
	close(USER);
	chmod $Sys->Get('PM-ADM'), $path;
	
	return 0;
}

#------------------------------------------------------------------------------------------------------------
#
#	ユーザ追加 - Set
#	-------------------------------------------
#	引　数：$name : 追加ユーザ
#	戻り値：なし
#
#------------------------------------------------------------------------------------------------------------
sub Add
{
	my $this = shift;
	my ($name) = @_;
	
	push @{$this->{'USER'}}, $name;
}

#------------------------------------------------------------------------------------------------------------
#
#	ユーザデータ取得 - Get
#	-------------------------------------------
#	引　数：$key : 取得キー
#			$default : デフォルト
#	戻り値：ユーザデータ
#
#------------------------------------------------------------------------------------------------------------
sub Get
{
	my $this = shift;
	my ($key, $default) = @_;
	my ($val);
	
	$val = $this->{$key};
	
	return (defined $val ? $val : (defined $default ? $default : undef));
}

#------------------------------------------------------------------------------------------------------------
#
#	ユーザクリア - Clear
#	-------------------------------------------
#	引　数：なし
#	戻り値：なし
#
#------------------------------------------------------------------------------------------------------------
sub Clear
{
	my $this = shift;
	
	undef @{$this->{'USER'}};
}

#------------------------------------------------------------------------------------------------------------
#
#	ユーザデータ設定 - SetData
#	-------------------------------------------
#	引　数：$key  : 設定キー
#			$data : 設定データ
#	戻り値：なし
#
#------------------------------------------------------------------------------------------------------------
sub Set
{
	my $this = shift;
	my ($key, $data) = @_;
	
	$this->{$key} = $data;
}

#------------------------------------------------------------------------------------------------------------
#
#	ユーザ調査 - Check
#	-------------------------------------------
#	引　数：$host : 調査ホスト
#	戻り値：登録ユーザ:1,未登録ユーザ:0
#
#------------------------------------------------------------------------------------------------------------
sub Check
{
	my $this = shift;
	my ($host, $addr, $koyuu) = @_;
	my ($flag, $sys, $addrb, $adex);
	
	$sys = $this->{'SYS'};
	$addrb = unpack('B32', pack('C*', split(/\./, $addr)));
	$flag = 0;
	$adex = '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}';
	
	foreach my $line (@{$this->{'USER'}}) {
		next if ($line eq '' || $line =~ /^[#;]/);
		
		if ($line =~ m|^($adex)(?:/([0-9]+))?$|) {
			my ($leng, $a);
			$leng = 32;
			$leng = $2 if ($2);
			$a = unpack("B$leng", pack('C*', split(/\./, $1)));
			if (substr($addrb, 0, $leng) eq $a) {
				$flag = 1;
				$sys->Set('HITS', $line);
				last;
			}
		}
		elsif ($line =~ m|^($adex)-($adex)$|) {
			my ($a, $b);
			$a = unpack('B32', pack('C*', split(/\./, $1)));
			$b = unpack('B32', pack('C*', split(/\./, $2)));
			if ($a gt $b) {
				$_ = $a;
				$a = $b;
				$b = $_;
			}
			if ($addrb ge $a && $addrb le $b) {
				$flag = 1;
				$sys->Set('HITS', $line);
				last;
			}
		}
		elsif ($host =~ /$line/) { # $lineは正規表現
			$flag = 1;
			$sys->Set('HITS', $line);
			last;
		}
		elsif (defined $koyuu && $koyuu =~ /^\Q$line\E$/) { # $lineは正規表現
			$flag = 1;
			$sys->Set('HITS', $line);
			last;
		}
	}
	
	if ($flag && $this->{'TYPE'} eq 'disable') {		# 規制ユーザ
		if ($this->{'METHOD'} eq 'disable') {			# 処理：書き込み不可
			return 4;
		}
		elsif ($this->{'METHOD'} eq 'host') {			# 処理：ホスト表示
			return 2;
		}
		else {
			return 4;
		}
	}
	elsif (! $flag && $this->{'TYPE'} eq 'enable') {	# 限定ユーザ以外
		if ($this->{'METHOD'} eq 'disable') {			# 処理：書き込み不可
			return 4;
		}
		elsif ($this->{'METHOD'} eq 'host') {			# 処理：ホスト表示
			return 2;
		}
		else {
			return 4;
		}
	}
	return 0;
}

#============================================================================================================
#	モジュール終端
#============================================================================================================
1;
