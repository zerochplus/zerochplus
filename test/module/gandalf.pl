#============================================================================================================
#
#	ユーザ通知管理モジュール
#
#============================================================================================================
package	GANDALF;

use strict;
use warnings;

#------------------------------------------------------------------------------------------------------------
#
#	コンストラクタ
#	-------------------------------------------------------------------------------------
#	@param	なし
#	@return	モジュールオブジェクト
#
#------------------------------------------------------------------------------------------------------------
sub new
{
	my $class = shift;
	
	my $obj = {
		'TO'		=> undef,
		'FROM'		=> undef,
		'SUBJECT'	=> undef,
		'TEXT'		=> undef,
		'DATE'		=> undef,
		'LIMIT'		=> undef,
	};
	bless $obj, $class;
	
	return $obj;
}

#------------------------------------------------------------------------------------------------------------
#
#	通知情報読み込み
#	-------------------------------------------------------------------------------------
#	@param	$Sys	MELKOR
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Load
{
	my $this = shift;
	my ($Sys) = @_;
	
	# ハッシュ初期化
	$this->{'TO'} = {};
	$this->{'FROM'} = {};
	$this->{'SUBJECT'} = {};
	$this->{'TEXT'} = {};
	$this->{'DATE'} = {};
	$this->{'LIMIT'} = {};
	
	my $path = '.' . $Sys->Get('INFO') . '/notice.cgi';
	
	if (open(my $fh, '<', $path)) {
		flock($fh, 2);
		my @lines = <$fh>;
		close($fh);
		map { s/[\r\n]+\z// } @lines;
		
		foreach (@lines) {
			next if ($_ eq '');
			
			my @elem = split(/<>/, $_, -1);
			if (scalar(@elem) < 7) {
				warn "invalid line in $path";
				#next;
			}
			
			my $id = $elem[0];
			$this->{'TO'}->{$id} = $elem[1];
			$this->{'FROM'}->{$id} = $elem[2];
			$this->{'SUBJECT'}->{$id} = $elem[3];
			$this->{'TEXT'}->{$id} = $elem[4];
			$this->{'DATE'}->{$id} = $elem[5];
			$this->{'LIMIT'}->{$id} = $elem[6];
		}
	}
}

#------------------------------------------------------------------------------------------------------------
#
#	通知情報保存
#	-------------------------------------------------------------------------------------
#	@param	$Sys	MELKOR
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Save
{
	my $this = shift;
	my ($Sys) = @_;
	
	foreach my $id (keys %{$this->{'TO'}}) {
		if ($this->IsLimitOut($id)) {
			$this->Delete($id);
		}
	}
	
	my $path = '.' . $Sys->Get('INFO') . '/notice.cgi';
	
	if (open(my $fh, (-f $path ? '+<' : '>'), $path)) {
		flock($fh, 2);
		seek($fh, 0, 0);
		binmode($fh);
		
		foreach (keys %{$this->{'TO'}}) {
			my $data = join('<>',
				$_,
				$this->{'TO'}->{$_},
				$this->{'FROM'}->{$_},
				$this->{'SUBJECT'}->{$_},
				$this->{'TEXT'}->{$_},
				$this->{'DATE'}->{$_},
				$this->{'LIMIT'}->{$_}
			);
			
			print $fh "$data\n";
		}
		
		truncate($fh, tell($fh));
		close($fh);
	}
	chmod($Sys->Get('PM-ADM'), $path);
}

#------------------------------------------------------------------------------------------------------------
#
#	IDセット取得
#	-------------------------------------------------------------------------------------
#	@param	$kind	検索種別
#	@param	$name	検索ワード
#	@param	$pBuf	IDセット格納バッファ
#	@return	キーセット数
#
#------------------------------------------------------------------------------------------------------------
sub GetKeySet
{
	my $this = shift;
	my ($kind, $name, $pBuf) = @_;
	
	my $n = 0;
	
	if ($kind eq 'ALL') {
		$n += push @$pBuf, keys(%{$this->{'TO'}});
	}
	else {
		foreach my $key (keys(%{$this->{$kind}})) {
			if (($this->{$kind}->{$key} eq $name) || ($kind eq 'ALL')) {
				$n += push @$pBuf, $key;
			}
		}
	}
	
	return $n;
}

#------------------------------------------------------------------------------------------------------------
#
#	通知情報取得
#	-------------------------------------------------------------------------------------
#	@param	$kind		情報種別
#	@param	$key		ID
#	@param	$default	デフォルト
#	@return	情報
#
#------------------------------------------------------------------------------------------------------------
sub Get
{
	my $this = shift;
	my ($kind, $key, $default) = @_;
	
	my $val = $this->{$kind}->{$key};
	
	return (defined $val ? $val : (defined $default ? $default : undef));
}

#------------------------------------------------------------------------------------------------------------
#
#	通知情報追加
#	-------------------------------------------------------------------------------------
#	@param	$to		通知先ユーザ
#	@param	$from	送信ユーザ
#	@param	$subj	タイトル
#	@param	$text	内容
#	@param	$limit	期限
#	@return	ID
#
#------------------------------------------------------------------------------------------------------------
sub Add
{
	my $this = shift;
	my ($to, $from, $subj, $text, $limit) = @_;
	
	my $id = time;
	$id++ while (exists $this->{'TO'}->{$id});
	
	$this->{'TO'}->{$id}		= $to;
	$this->{'FROM'}->{$id}		= $from;
	$this->{'SUBJECT'}->{$id}	= $subj;
	$this->{'TEXT'}->{$id}		= $text;
	$this->{'DATE'}->{$id}		= time;
	$this->{'LIMIT'}->{$id}		= $limit;
	
	return $id;
}

#------------------------------------------------------------------------------------------------------------
#
#	通知情報設定
#	-------------------------------------------------------------------------------------
#	@param	$id		ID
#	@param	$kind	情報種別
#	@param	$val	設定値
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Set
{
	my $this = shift;
	my ($id, $kind, $val) = @_;
	
	if (exists $this->{$kind}->{$id}) {
		$this->{$kind}->{$id} = $val;
	}
}

#------------------------------------------------------------------------------------------------------------
#
#	通知情報削除
#	-------------------------------------------------------------------------------------
#	@param	$id		削除ID
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub Delete
{
	my $this = shift;
	my ($id) = @_;
	
	delete $this->{'TO'}->{$id};
	delete $this->{'FROM'}->{$id};
	delete $this->{'SUBJECT'}->{$id};
	delete $this->{'TEXT'}->{$id};
	delete $this->{'DATE'}->{$id};
	delete $this->{'LIMIT'}->{$id};
}

#------------------------------------------------------------------------------------------------------------
#
#	通知情報判定
#	-------------------------------------------------------------------------------------
#	@param	$id		通知ID
#	@param	$user	ユーザID
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub IsInclude
{
	my $this = shift;
	my ($id, $user) = @_;
	
	# 全体通知
	if ($this->{'TO'}->{$id} eq '*') {
		return 1;
	}
	
	my @users = split(/\, ?/, $this->{'TO'}->{$id});
	foreach (@users) {
		if ($_ eq $user) {
			return 1;
		}
	}
	return 0;
}

#------------------------------------------------------------------------------------------------------------
#
#	通知情報期限切れ判定
#	-------------------------------------------------------------------------------------
#	@param	$id		通知ID
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub IsLimitOut
{
	my $this = shift;
	my ($id) = @_;
	
	# 全体通知の場合のみ
	if ($this->{'TO'}->{$id} eq '*') {
		my $now = time;
		if ($now > $this->{'LIMIT'}->{$id}) {
			return 1;
		}
	}
	return 0;
}

#------------------------------------------------------------------------------------------------------------
#
#	通知先ユーザ削除
#	-------------------------------------------------------------------------------------
#	@param	$id		通知ID
#	@param	$user	ユーザID
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub RemoveToUser
{
	my $this = shift;
	my ($id, $user) = @_;
	
	# 全体通知は個別削除不可
	if ($this->{'TO'}->{$id} eq '*') {
		return;
	}
	
	my @users = split(/\, ?/, $this->{'TO'}->{$id});
	my @news = ();
	foreach (@users) {
		if ($_ ne $user) {
			push(@news, $_);
		}
	}
	
	# すべての通知先ユーザが削除されたら、その通知は破棄する
	if (scalar(@news) == 0) {
		$this->Delete($id);
	}
	else {
		$this->{'TO'}->{$id} = join(',', @news);
	}
}

#============================================================================================================
#	Module END
#============================================================================================================
1;
