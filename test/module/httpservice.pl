#============================================================================================================
#
#	httpサービスモジュール
#	httpservice.pl
#	-------------------------------------------------------------------------------------
#	2005.11.09 start
#	2012.02.25 大幅に改造 互換性？ナニソレ？
#
#============================================================================================================
package HTTPSERVICE;

use strict;
use warnings;

use Socket;

#------------------------------------------------------------------------------------------------------------
#
#	コンストラクタ
#	-------------------------------------------------------------------------------------
#	@param	なし
#	@return	httpサービスオブジェクト
#
#------------------------------------------------------------------------------------------------------------
sub new
{
	my $this = shift;
	my ($obj, %PARAMETER);
	
	$obj = {
		'METHOD'		=> 'GET',
		'URI'			=> undef,
		'PARAMETER'		=> \%PARAMETER,
		'AGENT'			=> 'Mozilla/5.0 Zero-Channel BBS Plus Project',
		'CONTENT_TYPE'	=> 'application/x-www-form-urlencoded',
		'CONNECTION'	=> 'close',
		'REFERER'		=> undef,
		'LANGUAGE'		=> 'ja,en-us;q=0.7,en;q=0.3',
		'PROXY_HOST'	=> undef,
		'PROXY_PORT'	=> undef,
		
		'TIMEOUT'		=> 3,
		'HEADER'		=> undef,
		'CODE'			=> 500,
		'CONTENT'		=> undef
	};
	bless $obj, $this;
	return $obj;
}

=for
#------------------------------------------------------------------------------------------------------------
#
#	初期化(コンストラクタで初期化されない場合用)
#	-------------------------------------------------------------------------------------
#	@param	なし
#	@return	httpサービスオブジェクト
#
#------------------------------------------------------------------------------------------------------------
sub init
{
	my $this = shift;
	
	$this->{'AGENT'}		= 'Mozilla/5.0 Zero-Channel BBS Plus Project';
	$this->{'METHOD'}		= 'GET';
	$this->{'CONTENT_TYPE'}	= 'application/x-www-form-urlencoded';
	$this->{'CONNECTION'}	= 'close';
	$this->{'TIMEOUT'}		= 3;
}
=cut

#------------------------------------------------------------------------------------------------------------
#
#	http要求送信
#	-------------------------------------------------------------------------------------
#	@param	なし
#	@return	エラーコード
#			1:正常終了
#			-1:URIエラー
#			-2:socketエラー
#
#------------------------------------------------------------------------------------------------------------
sub request
{
	my $this = shift;
	my ($uri, $host, $port, $target, $request);
	
	# URIを分解
	$uri = $this->{'URI'};
	( $host, $port, $target ) = decompositionURI($uri);
	
	if ( !defined $host ) {
		return -1;
	}
	
	# プロキシを使用する
	if ( defined $this->{'PROXY_HOST'} ) {
		$host	= $this->{'PROXY_HOST'};
		$port	= $this->{'PROXY_PORT'} || 80;
		$target	= $uri;
	}
	
	# リクエストクエリの作成
	$request = createRequestString($this, $host, $target);
	
	eval
	{
		my ($sockaddr, $header, $streamflag, $content, $contflag, $code, $uri);
		local $SIG{ALRM} = sub{ die "connect time out. $!" };
		
		alarm($this->{'TIMEOUT'});
		
		# ソケットの作成
		$sockaddr = pack_sockaddr_in( $port, inet_aton($host) );
		socket ( SOCKET, PF_INET, SOCK_STREAM, 0 );
		select SOCKET;
		$| =1;
		select STDOUT;
		connect ( SOCKET, $sockaddr );
		#autoflush SOCKET (1);
		
		# リクエスト送信
		print SOCKET $request;
		
		$streamflag = 0;
		$contflag = 0;
		
		while ( <SOCKET> ) {
			
			chomp;
			
			# HTTPステータス
			if ( $_ =~ m!HTTP/1.1 (\d+) .+$! ) {
				$code = $1;
			}
			
			# レスポンスヘッダーの取得
			if ( $contflag == 0 ) {
				$header .= $_."\n";
				
				# ストリームらしい
				if ( $_ =~ m/^Transfer\-Encoding: chunked/i ) {
					$streamflag = 1;
				}
				
			}
			
			# 本文の取得
			if ( $_ =~ m!^(\r)?(\n)?$! && $contflag == 0 ) {
				$contflag = 1;
			}
			elsif ( $contflag == 1 ) {
				
				# ストリームは無視する
				next if ( $_ =~ /^([0-9a-fA-F]+)?(\x20+)?([\r|\n]+)$/ && $streamflag );
				
				$content .= $_."\n";
				
			}
			
		}
		
		close(SOCKET);
		
		$this->{'CODE'}		= $code;
		$this->{'HEADER'}	= $header;
		$this->{'CONTENT'}	= $content;
		
		alarm(0);
		
	};
	if ($@) {
		$this->{'CONTENT'} = $@;
		return -2;
	}
	
	return 1;
}

#------------------------------------------------------------------------------------------------------------
#
#	URI分解
#	-------------------------------------------------------------------------------------
#	@param	$uri	URI
#	@return	$host	ホスト
#			$port	ポート番号
#
#------------------------------------------------------------------------------------------------------------
sub decompositionURI
{
	my $uri = shift;
	my ($host, $port, $path);
	
	$uri =~ m!(http:)?(//)?([^:/]*)?(:(\d+)?)?(/.*)?!;
	if ($3) { $host = $3; }
	if ($5) { $port = $5; }
	else	{ $port = 80; }
	if ($6) { $path = $6; }
	
	return ( $host, $port, $path );
}

#------------------------------------------------------------------------------------------------------------
#
#	http要求文字列の生成
#	-------------------------------------------------------------------------------------
#	@param	$host	http要求先アドレス
#			$target	http要求先URI
#	@return	http要求ヘッダ文字列
#
#------------------------------------------------------------------------------------------------------------
sub createRequestString
{
	my $this = shift;
	my ($host, $target) = @_;
	my ($request, $params, $len);
	
	# httpボディ(パラメータ)の作成
	foreach (keys %{$this->{'PARAMETER'}}) {
		$params .= "$_=" . encode($this->{'PARAMETER'}->{$_}) . '&';
	}
	if (defined $params) {
		$params = substr($params, 0, length($params) - 1);
		$len = length $params;
	}
	
	$request  = $this->{'METHOD'}." ".$target." HTTP/1.1\n";
	$request .= "Host: ".$host."\n";
	$request .= "User-Agent: ".$this->{'AGENT'}."\n";
	$request .= "Accept-Language: ".$this->{'LANGUAGE'}."\n";
	$request .= 'Content-Type: ' . $this->{'CONTENT_TYPE'} . "\n";
	$request .= 'Keep-Alive: 115'."\n";
	if ( $this->{'REFERER'} ) {
		$request .= "Referer: ".$this->{'REFERER'}."\n";
	}
	$request .= "Connection: ".$this->{'CONNECTION'}."\n";
	if ( $this->{'METHOD'} eq "POST" ) {
		$request .= "Content-Length: ".$len."\n";
	}
	$request .= "\n";
	
	if ( $this->{'METHOD'} eq "POST" ) {
		$request .= $params."\n";
	}
	
	return $request;
	
}

#------------------------------------------------------------------------------------------------------------
#
#	URLエンコード
#	-------------------------------------------------------------------------------------
#	@param	$text	エンコード文字列
#	@return	URLエンコードした文字列
#
#------------------------------------------------------------------------------------------------------------
sub encode
{
	my $str = shift;
	$str =~ s/([^\w ])/'%'.unpack('H2', $1)/eg;
	$str =~ tr/ /+/;
	return $str;
}

#------------------------------------------------------------------------------------------------------------
#
#	http応答ヘッダー取得
#	-------------------------------------------------------------------------------------
#	@param	なし
#	@return	http応答ヘッダー
#
#------------------------------------------------------------------------------------------------------------
sub getHeader
{
	my $this = shift;
	return $this->{'HEADER'};
}

#------------------------------------------------------------------------------------------------------------
#
#	http応答HTTPステータス取得
#	-------------------------------------------------------------------------------------
#	@param	なし
#	@return	httpステータス
#
#------------------------------------------------------------------------------------------------------------
sub getStatus
{
	my $this = shift;
	return $this->{'CODE'};
}

#------------------------------------------------------------------------------------------------------------
#
#	http応答コンテンツ取得
#	-------------------------------------------------------------------------------------
#	@param	なし
#	@return	http取得先コンテンツ http要求でsocketエラーが起きた場合はエラーメッセージ
#
#------------------------------------------------------------------------------------------------------------
sub getContent
{
	my $this = shift;
	return $this->{'CONTENT'};
}

#------------------------------------------------------------------------------------------------------------
#
#	http要求先uri設定
#	-------------------------------------------------------------------------------------
#	@param	$uri	URI
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setURI
{
	my $this = shift;
	my ($uri) = @_;
	$this->{'URI'} = $uri;
}

#------------------------------------------------------------------------------------------------------------
#
#	http要求先ポート設定
#	-------------------------------------------------------------------------------------
#	@param	$port	ポート番号
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setPort
{
	my $this = shift;
	my ($port) = @_;
	$this->{'PORT'} = $port;
}

#------------------------------------------------------------------------------------------------------------
#
#	http要求メソッド設定
#	-------------------------------------------------------------------------------------
#	@param	$method	メソッド名
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setMethod
{
	my $this = shift;
	my ($method) = @_;
	$this->{'METHOD'} = $method;
}


#------------------------------------------------------------------------------------------------------------
#
#	UserAgent設定
#	-------------------------------------------------------------------------------------
#	@param	$agent	UserAgent
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setAgent
{
	my $this = shift;
	my ($agent) = @_;
	$this->{'AGENT'} = $agent;
}

#------------------------------------------------------------------------------------------------------------
#
#	タイムアウト設定
#	-------------------------------------------------------------------------------------
#	@param	$time	タイムアウト時間(秒)
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setTimeout
{
	my $this = shift;
	my ($time) = @_;
	$this->{'TUMEOUT'} = $time;
}

#------------------------------------------------------------------------------------------------------------
#
#	コンテントタイプ設定
#	-------------------------------------------------------------------------------------
#	@param	$type	コンテントタイプ
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setContentType
{
	my $this = shift;
	my ($type) = @_;
	$this->{'CONTENT_TYPE'} = $type;
}

#------------------------------------------------------------------------------------------------------------
#
#	コネクション設定
#	-------------------------------------------------------------------------------------
#	@param	$conn	コネクション
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setConnection
{
	my $this = shift;
	my ($conn) = @_;
	$this->{'CONNECTION'} = $conn;
}

#------------------------------------------------------------------------------------------------------------
#
#	リファラ設定
#	-------------------------------------------------------------------------------------
#	@param	$ref	リファラ
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setReferer
{
	my $this = shift;
	my ($ref) = @_;
	$this->{'REFERER'} = $ref;
}

#------------------------------------------------------------------------------------------------------------
#
#	プロキシ設定
#	-------------------------------------------------------------------------------------
#	@param	$proxy	プロキシ ( [host]:[port]形式で )
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setProxy
{
	my $this = shift;
	my ($proxy) = @_;
	my ($host, $port) = split( /:/, $proxy );
	$this->{'PROXY_HOST'} = $host;
	$this->{'PROXY_PORT'} = $port;
}

#------------------------------------------------------------------------------------------------------------
#
#	言語設定
#	-------------------------------------------------------------------------------------
#	@param	$lang	言語
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setLanguage
{
	my $this = shift;
	my ($lang) = @_;
	$this->{'LANGUAGE'} = $lang;
}

#------------------------------------------------------------------------------------------------------------
#
#	http要求パラメータ設定
#	-------------------------------------------------------------------------------------
#	@param	$key	パラメータキー
#	@param	$value	パラメータ値
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setParameter
{
	my $this = shift;
	my ($key, $value) = @_;
	$this->{'PARAMETER'}->{$key} = $value;
}

#============================================================================================================
#	Module END
#============================================================================================================
1;
