#============================================================================================================
#
#	httpサービスモジュール
#	httpservice.pl
#	-------------------------------------------------------------------------------------
#	2005.11.09 start
#
#============================================================================================================
package HTTPSERVICE;

use Socket;
use strict;
use warnings;


#------------------------------------------------------------------------------------------------------------
#
#	コンストラクタ
#	-------------------------------------------------------------------------------------
#	@param	なし
#	@return	httpサービスオブジェクト
#
#------------------------------------------------------------------------------------------------------------
sub new
{
	my $this = shift;
	my ($obj, %PARAMETER);
	
	$obj = {
		'METHOD'		=> 'GET',
		'URI'			=> undef,
		'PORT'			=> 80,
		'PARAMETER'		=> \%PARAMETER,
		'AGENT'			=> 'Monazilla/1.00 0ch.4.00 (1000)',
		'CONTENT_TYPE'	=> 'application/x-www-form-urlencoded',
		'CONNECTION'	=> 'close',
		'REFERER'		=> '0ch.mine.nu',
		'RESPONSE'		=> undef
	};
	bless $obj, $this;
	return $obj;
}

#------------------------------------------------------------------------------------------------------------
#
#	初期化(コンストラクタで初期化されない場合用)
#	-------------------------------------------------------------------------------------
#	@param	なし
#	@return	httpサービスオブジェクト
#
#------------------------------------------------------------------------------------------------------------
sub init
{
	my $this = shift;
	
	$this->{'PORT'} = 80;
	$this->{'AGENT'} = '0ch/Monazilla';
	$this->{'METHOD'} = 'GET';
	$this->{'CONTENT_TYPE'} = 'application/x-www-form-urlencoded';
	$this->{'CONNECTION'} = 'Keep-Alive';
}

#------------------------------------------------------------------------------------------------------------
#
#	http要求送信
#	-------------------------------------------------------------------------------------
#	@param	なし
#	@return	エラーコード
#			1:正常終了
#			-1:URIエラー
#			-100:socketエラー
#
#------------------------------------------------------------------------------------------------------------
sub request
{
	my $this = shift;
	my (@uris, $host, $uri, $request);
	
	# httpリクエスト文字列の生成
	@uris = split(/\//, $this->{'URI'});
	if (! defined ($host = getTargetAddress($uris[2]))) {
		return -1;
	}
	$uri = $this->{'URI'};
	$request = createRequestString($this, $host, $uri);
	
#	eval
	{
		my ($sockaddr, $response, $uri);
		
		# ソケットの作成
		socket(SOCK, PF_INET, SOCK_STREAM, getprotobyname('tcp')) || die('ERROR');
		select SOCK;
		$| =1;
		select STDOUT;
		$sockaddr = sockaddr_in($this->{'PORT'}, inet_aton($host));
		connect(SOCK, $sockaddr) || die('ERROR');
		
		# リクエスト送信
		print SOCK $request;
		
		# レスポンス受信
		while (<SOCK>) {
		    $response .= $_;
		}
		close SOCK;
		
		$this->{'RESPONSE'} = $response;
	};
	if ($@ ne '') {
		$this->{'RESPONSE'} = $@;
		return -100;
	}
	
	return 1;
}

#------------------------------------------------------------------------------------------------------------
#
#	http応答取得
#	-------------------------------------------------------------------------------------
#	@param	なし
#	@return	http応答.http要求でsocketエラーが起きた場合はエラーメッセージ
#
#------------------------------------------------------------------------------------------------------------
sub getResponse
{
	my $this = shift;
	return $this->{'RESPONSE'};
}

#------------------------------------------------------------------------------------------------------------
#
#	http要求先uri設定
#	-------------------------------------------------------------------------------------
#	@param	$uri	URI
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setURI
{
	my $this = shift;
	my ($uri) = @_;
	$this->{'URI'} = $uri;
}

#------------------------------------------------------------------------------------------------------------
#
#	http要求先ポート設定
#	-------------------------------------------------------------------------------------
#	@param	$port	ポート番号
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setPort
{
	my $this = shift;
	my ($port) = @_;
	$this->{'PORT'} = $port;
}

#------------------------------------------------------------------------------------------------------------
#
#	http要求メソッド設定
#	-------------------------------------------------------------------------------------
#	@param	$method	メソッド名
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setMethod
{
	my $this = shift;
	my ($method) = @_;
	$this->{'METHOD'} = $method;
}


#------------------------------------------------------------------------------------------------------------
#
#	UserAgent設定
#	-------------------------------------------------------------------------------------
#	@param	$agent	UserAgent
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setAgent
{
	my $this = shift;
	my ($agent) = @_;
	$this->{'AGENT'} = $agent;
}

#------------------------------------------------------------------------------------------------------------
#
#	http要求パラメータ設定
#	-------------------------------------------------------------------------------------
#	@param	$key	パラメータキー
#	@param	$value	パラメータ値
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setParameter
{
	my $this = shift;
	my ($key, $value) = @_;
	$this->{'PARAMETER'}->{$key} = $value;
}

#------------------------------------------------------------------------------------------------------------
#
#	コンテントタイプ設定
#	-------------------------------------------------------------------------------------
#	@param	$type	コンテントタイプ
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setContentType
{
	my $this = shift;
	my ($type) = @_;
	$this->{'CONTENT_TYPE'} = $type;
}

#------------------------------------------------------------------------------------------------------------
#
#	コネクション設定
#	-------------------------------------------------------------------------------------
#	@param	$conn	コネクション
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setConnection
{
	my $this = shift;
	my ($conn) = @_;
	$this->{'CONNECTION'} = $conn;
}

#------------------------------------------------------------------------------------------------------------
#
#	リファラ設定
#	-------------------------------------------------------------------------------------
#	@param	$ref	リファラ
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub setReferer
{
	my $this = shift;
	my ($ref) = @_;
	$this->{'REFERER'} = $ref;
}

#------------------------------------------------------------------------------------------------------------
#
#	http要求先アドレス取得
#	-------------------------------------------------------------------------------------
#	@param	$host	http要求先ホスト
#	@return	http要求先アドレス
#
#------------------------------------------------------------------------------------------------------------
sub getTargetAddress
{
	my ($host) = @_;
	my (@addrs, $addr);
	
	@addrs = unpack('C4', (gethostbyname $host)[4]);
	if ($addrs[0] !~ /^[0-9]+$/ || $addrs[0] < 0 || $addrs[0] > 256 ||
	    $addrs[1] !~ /^[0-9]+$/ || $addrs[1] < 0 || $addrs[1] > 256 ||
	    $addrs[2] !~ /^[0-9]+$/ || $addrs[2] < 0 || $addrs[2] > 256 ||
	    $addrs[3] !~ /^[0-9]+$/ || $addrs[3] < 0 || $addrs[3] > 256) {
		return undef;
	}
	$addr = join('.', @addrs);
	
	return $addr;
}

#------------------------------------------------------------------------------------------------------------
#
#	http要求先URI(ホストからの相対URI)取得
#	-------------------------------------------------------------------------------------
#	@param	$uriList	http要求URIを'/'で分割したリスト
#	@return	http要求先URI
#
#------------------------------------------------------------------------------------------------------------
sub getRelativeURI
{
	my ($uriList) = @_;
	my ($i, $count, $uri);
	
	$count = @$uriList;
	$uri = '';
	for($i = 3;$i < $count;$i++) {
		$uri .= '/' . $uriList->[$i];
	}
	
	if ($uri eq '') {
		$uri = '/';
	}
	return $uri;
}

#------------------------------------------------------------------------------------------------------------
#
#	http要求文字列の生成
#	-------------------------------------------------------------------------------------
#	@param	$host	http要求先アドレス
#	@param	$uri	http要求先相対URI
#	@return	http要求ヘッダ文字列
#
#------------------------------------------------------------------------------------------------------------
sub createRequestString
{
	my $this = shift;
	my ($host, $uri) = @_;
	my ($request, $params, $len);
	
	# httpボディ(パラメータ)の作成
	foreach (keys %{$this->{'PARAMETER'}}) {
		$params .= "$_=" . encode($this->{'PARAMETER'}->{$_}) . '&';
	}
	if ($params ne '') {
		$params = substr($params, 0, length($params) - 1);
		$len = length $params;
	}
	
	# httpリクエストヘッダの作成
	$request .= $this->{'METHOD'} . " $uri HTTP/1.0\r\n";
	$request .= 'User-Agent: ' . $this->{'AGENT'} . "\r\n";
	$request .= "Host: $host\r\n";
	$request .= 'Connection: ' . $this->{'CONNECTION'} . "\r\n";
	$request .= 'Content-Type: ' . $this->{'CONTENT_TYPE'} . "\r\n";
	$request .= "Content-Length: $len\r\n";
	$request .= "\r\n";
	
	# httpボディを連結
	if ($len > 0) {
		$request .= $params;
	}
	
	return $request;
}

#------------------------------------------------------------------------------------------------------------
#
#	URLエンコード
#	-------------------------------------------------------------------------------------
#	@param	$text	エンコード文字列
#	@return	URLエンコードした文字列
#
#------------------------------------------------------------------------------------------------------------
sub encode
{
	my ($text) = @_;
	$text =~ s/(\W)/sprintf('%%%02X', unpack('C', $1))/eg;
	return($text);
}

#------------------------------------------------------------------------------------------------------------
#
#	http要求タイムアウトハンドラ
#	-------------------------------------------------------------------------------------
#	@param	なし
#	@return	なし
#
#------------------------------------------------------------------------------------------------------------
sub onTimeout
{
	die 'ERRROR';
}

#============================================================================================================
#	Module END
#============================================================================================================
1;
